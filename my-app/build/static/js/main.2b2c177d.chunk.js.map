{"version":3,"sources":["pages/search.js","pages/saved.js","App.js","serviceWorker.js","index.js"],"names":["Search","useState","searchValue","setSearchValue","books","setBooks","useEffect","fetch","then","response","json","booksSearched","items","type","value","onChange","event","target","map","book","key","id","href","saleInfo","buyLink","volumeInfo","title","description","authors","src","imageLinks","thumbnail","onClick","method","headers","Accept","body","JSON","stringify","image","link","catch","error","console","log","saveBook","Saved","booksSaved","_id","App","to","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"+PA2DeA,MAzDf,WAAmB,IAAD,EACwBC,mBAAS,IADjC,mBACPC,EADO,KACMC,EADN,OAEYF,mBAAS,IAFrB,mBAEPG,EAFO,KAEAC,EAFA,KAwCd,OApCAC,qBAAU,WACc,KAAhBJ,GAIJK,MAAM,iDAAmDL,EAAc,gDAClEM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACFN,EAASM,EAAcC,YAIhC,CAACV,IAyBA,6BACI,2BAAOW,KAAK,SAASC,MAAOZ,EAAaa,SAAU,SAAAC,GAAK,OAAIb,EAAea,EAAMC,OAAOH,UACvFV,EAAMc,KAAI,SAAAC,GAAI,uBACX,yBAAKC,IAAKD,EAAKE,IAEX,qCAAU,uBAAGC,KAAI,UAAGH,EAAKI,gBAAR,aAAG,EAAeC,SAAzB,UAAmCL,EAAKM,kBAAxC,aAAmC,EAAiBC,QAC9D,qDAAiBP,EAAKM,kBAAtB,aAAiB,EAAiBE,aAClC,iDAAaR,EAAKM,kBAAlB,aAAa,EAAiBG,SAC9B,qCAAU,yBAAKC,IAAG,UAAGV,EAAKM,kBAAR,iBAAG,EAAiBK,kBAApB,aAAG,EAA6BC,aAClD,4BAAQC,QAAS,kBAhChB,SAACb,GAEdZ,MAAM,aAAc,CAChB0B,OAAQ,OACRC,QAAS,CACLC,OAAQ,mBACR,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAElBZ,MAAOP,EAAKM,WAAWC,MACvBE,QAAST,EAAKM,WAAWG,QACzBD,YAAaR,EAAKM,WAAWE,YAC7BY,MAAOpB,EAAKM,WAAWK,WAAWC,UAClCS,KAAMrB,EAAKI,SAASC,YAGtBiB,OAAM,SAAAC,GACHC,QAAQC,IAAIF,MAceG,CAAS1B,KAAhC,cCnBL2B,MA/Bf,WAAkB,IAAD,EACa7C,mBAAS,IADtB,mBACNG,EADM,KACCC,EADD,KAcb,OAXAC,qBAAU,WAENC,MAAM,cACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAuC,GACFJ,QAAQC,IAAIG,GACZ1C,EAAS0C,QAGlB,IAGC,6BACI,gDACC3C,EAAMc,KAAI,SAAAC,GAAI,aACX,yBAAKC,IAAKD,EAAK6B,KACX,qCAAU,uBAAG1B,KAAI,UAAGH,EAAKI,gBAAR,aAAG,EAAeC,SAAUL,EAAKO,QAClD,2CAAiBP,EAAKQ,aACtB,uCAAaR,EAAKS,SAClB,qCAAU,yBAAKC,IAAMV,EAAKoB,e,MCJ/BU,MAZf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUC,GAAG,UAAUC,KAAK,IAAIC,OAAK,IACrC,kBAAC,IAAD,CAAOD,KAAK,UAAUE,UAAWrD,IACjC,kBAAC,IAAD,CAAOmD,KAAK,SAASE,UAAWP,OCFpBQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1D,MAAK,SAAA2D,GACJA,EAAaC,gBAEd3B,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM2B,c","file":"static/js/main.2b2c177d.chunk.js","sourcesContent":["import React, {useState,useEffect } from \"react\";\n\nfunction Search() {\n    const [searchValue, setSearchValue] = useState('');\n    const [books, setBooks] = useState([]);\n\n    useEffect(() => {\n        if (searchValue !== '') {\n        // make the fetch function get the book based on what the user searched (searchValue)\n        // console.log it maybe?\n        // setBooks to the books that were recieved\n        fetch('https://www.googleapis.com/books/v1/volumes?q=' + searchValue + '&key=AIzaSyBnAhH98CH6DznQGjpCLWA3x-dY757Eu4I')\n            .then(response => response.json())\n            .then(booksSearched => {\n                setBooks(booksSearched.items)\n                // saved the books that w\n            })\n        }\n    }, [searchValue]);\n\n    const saveBook = (book) => {\n\n        fetch('/api/books', {\n            method: \"POST\",\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n               // {}, save title, description etc.\n               title: book.volumeInfo.title,\n               authors: book.volumeInfo.authors,\n               description: book.volumeInfo.description,\n               image: book.volumeInfo.imageLinks.thumbnail,\n               link: book.saleInfo.buyLink,\n            })\n        })\n            .catch(error => {\n                console.log(error);\n            });\n    };\n\n    return (\n        <div>\n            <input type=\"search\" value={searchValue} onChange={event => setSearchValue(event.target.value)} />\n            {books.map(book => (\n                <div key={book.id}>\n                    \n                    <p>Title: <a href= {book.saleInfo?.buyLink}>{book.volumeInfo?.title}</a></p>\n                    <p>Description: {book.volumeInfo?.description}</p>\n                    <p>Authors: {book.volumeInfo?.authors}</p>\n                    <p>Image: <img src= {book.volumeInfo?.imageLinks?.thumbnail} /></p>\n                    <button onClick={() => saveBook(book)}>Save</button>\n                </div>\n            ))}\n        </div>\n    )\n}\n\nexport default Search;","import React, {useState,useEffect } from \"react\";\n\nfunction Saved() {\n    const [books, setBooks] = useState([]);\n\n    useEffect(() => {\n        \n        fetch('/api/books')\n            .then(response => response.json())\n            .then(booksSaved => {\n                console.log(booksSaved)\n                setBooks(booksSaved)\n                \n            })\n    }, []);\n\n    return (\n        <div>\n            <h1>Your Saved Books</h1>\n            {books.map(book => (\n                <div key={book._id}>\n                    <p>Title: <a href= {book.saleInfo?.buyLink}>{book.title}</a></p>\n                    <p>Description: {book.description}</p>\n                    <p>Authors: {book.authors}</p>\n                    <p>Image: <img src= {book.image} /></p>\n                </div>\n            ))}\n        </div>\n    )\n}\n\n\n\nexport default Saved;","import React from 'react';\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\n\n// pages\nimport Search from './pages/search';\nimport Saved from './pages/saved';\nimport './App.css';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Redirect to=\"/search\" path=\"/\" exact />\n        <Route path=\"/search\" component={Search} />\n        <Route path=\"/saved\" component={Saved} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}